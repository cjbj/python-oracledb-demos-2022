# flask_demo.py
#
# Demo using Flask with Oracle Database to show a few things:
#  - fixed pool sizes are recommended, see https://python-oracledb.readthedocs.io/en/latest/user_guide/connection_handling.html#connection-pool-sizing
#  - a larger pool 'increment' will help restablish the pool if, for example,
#    the network drops out and all connections have to be recreated.
#  - Using PL/SQL to wrap SQL can reduce round-trips to the DB
#
# Before running, set these environment variables:
#
#     PYTHON_USERNAME       - your DB username
#     PYTHON_PASSWORD       - your DB password
#     PYTHON_CONNECTSTRING  - the connection string to the DB, e.g. "example.com/XEPDB1"
#     PORT                  - port the web server will listen on.  The default in 8081
#
# The default route will display a welcome message:
#   http://127.0.0.1:8081/
#
# To find a username you can pass an id, for example 1:
#   http://127.0.0.1:8081/user/1
#
# To insert new a user 'fred' you can call:
#    http://127.0.0.1:8081/post/fred

import os
import traceback

from flask import Flask
import oracledb

################################################################################
#
# start_pool(): starts the connection pool
#
def start_pool():

    pool_min = 4
    pool_max = pool_min
    pool_inc = 2

    print("Connecting to", os.environ.get("PYTHON_CONNECTSTRING"))

    pool = oracledb.create_pool(user=os.environ.get("PYTHON_USERNAME"),
                                password=os.environ.get("PYTHON_PASSWORD"),
                                dsn=os.environ.get("PYTHON_CONNECTSTRING"),
                                min=pool_min,
                                max=pool_max,
                                increment=pool_inc)

    return pool

################################################################################
#
# create_schema(): drop and create the demo table, and add a row
#
def create_schema():
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("""
        begin
          begin
            execute immediate 'drop table demo';
            exception when others then
              if sqlcode <> -942 then
                raise;
              end if;
          end;

          execute immediate 'create table demo (
                                    id       number generated by default as identity,
                                    username varchar2(40))';

          execute immediate 'insert into demo (username) values (''chris'')';

          commit;
        end;""")

################################################################################
#
# Specify some routes
#
app = Flask(__name__)

# Display a welcome message on the 'home' page
@app.route('/')
def index():
    return "Welcome to the demo app"

# Add a new username
@app.route('/post/<string:username>')
def post(username):
    connection = pool.acquire()
    cursor = connection.cursor()
    connection.autocommit = True
    idbv = cursor.var(int)
    cursor.execute("""
        insert into demo (username)
        values (:unbv)
        returning id into :idbv""", [username, idbv])
    return 'Inserted {} with id {}'.format(username, idbv.getvalue()[0])

# Show the username for a given id
@app.route('/user/<int:id>')
def show_username(id):
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("select username from demo where id = :idbv", [id])
    r = cursor.fetchone()
    return (r[0] if r else "Unknown user id")

################################################################################
#
# Initialization is done once at startup time
#
if __name__ == '__main__':

    # Create a pool of connections
    pool = start_pool()

    # Create a demo table
    create_schema()

    print(f"\nTry loading http://127.0.0.1:{os.environ.get('PORT', '8081')}/user/1\n")

    # Start a webserver
    app.run(port=int(os.environ.get('PORT', '8081')))
